import heapq
import sys

input = sys.stdin.readline
n,m,x = map(int,input().split())

graph = []
INF = int(1e9)

for i in range(n+1):
  graph.append([])
  
for i in range(m):
  a,b,c = map(int,input().split())
  graph[a].append((b,c))

def distra(graph,start):
  distance = [INF]*(n+1)
  distance[start] = 0
  q = []
  heapq.heappush(q,(0,start))

  while q:
    dist,now = heapq.heappop(q)
    if distance[now]<dist:
      continue
    for i in graph[now]:
      cost = dist+i[1]
      if distance[i[0]]>cost:
        distance[i[0]] = cost
        heapq.heappush(q,(cost,i[0]))

  return distance

max_range = 0
for i in range(1,n+1):
  range_a = distra(graph,i)
  range_b = distra(graph,x)
  max_range = max(max_range,range_a[x]+range_b[i])

print(max_range)
