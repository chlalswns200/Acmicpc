import sys
from collections import deque

input = sys.stdin.readline

n,l,r = map(int,input().split())

ar = []

for i in range(n):
  ar.append(list(map(int,input().split())))

dx = [-1,1,0,0]
dy = [0,0,-1,1]
cnt = 0

flag = True
cnt = 0

while flag: 
  union = [[False] * n for _ in range(n)]
  nCnt = 0
  for i in range(n):
    for j in range(n):
      if union[i][j]:
        continue
      queue = deque([])
      queue.append((i,j))
      union[i][j] = True
      tmp = []
      unionSum = 0
      while queue:
        x,y = queue.popleft()
        tmp.append((x,y))
        for k in range(4):
          nx = x + dx[k]
          ny = y + dy[k]
          if -1<nx<n and -1<ny<n:
            if not union[nx][ny] and l <= abs(ar[nx][ny] - ar[x][y])<=r:
              union[nx][ny] = True
              queue.append((nx,ny))
      if len(tmp) == 1:
        union[i][j] = False
        nCnt +=1
      else:
        ll = 0
        for x,y in tmp:
          unionSum += ar[x][y]
          ll+=1
        population = unionSum // ll
        for x,y in tmp:
          ar[x][y] = population
  if nCnt == n*n:
    break
    flag = False
  cnt+=1

print(cnt)
